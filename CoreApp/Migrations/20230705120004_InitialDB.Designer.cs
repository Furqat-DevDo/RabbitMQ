// <auto-generated />
using System;
using CoreApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CoreApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230705120004_InitialDB")]
    partial class InitialDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.5.23280.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CoreApp.Entities.FileInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("extension");

                    b.Property<string>("PathToFile")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path_to_file");

                    b.Property<DateTime>("SavedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("saved_date");

                    b.HasKey("Id")
                        .HasName("pk_files");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("CoreApp.Entities.Ticket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("BookingDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("booking_date_time");

                    b.Property<DateTime?>("CancelledDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelled_date_time");

                    b.Property<DateTime>("FlightDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("flight_date_time");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("from");

                    b.Property<string>("OwnerAdrress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner_adrress");

                    b.Property<int>("OwnerAge")
                        .HasColumnType("integer")
                        .HasColumnName("owner_age");

                    b.Property<string>("OwnerFio")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner_fio");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("to");

                    b.HasKey("Id")
                        .HasName("pk_tickets");

                    b.ToTable("tickets", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
